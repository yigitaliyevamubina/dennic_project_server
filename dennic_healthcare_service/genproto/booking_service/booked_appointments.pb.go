// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booking_service/booked_appointments.proto

package booking_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Appointment struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	DepartmentId         string   `protobuf:"bytes,2,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	AppointmentDate      string   `protobuf:"bytes,5,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date"`
	AppointmentTime      string   `protobuf:"bytes,6,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time"`
	Duration             int64    `protobuf:"varint,7,opt,name=duration,proto3" json:"duration"`
	Key                  string   `protobuf:"bytes,8,opt,name=key,proto3" json:"key"`
	ExpiresAt            string   `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at"`
	PatientStatus        bool     `protobuf:"varint,10,opt,name=patient_status,json=patientStatus,proto3" json:"patient_status"`
	CreatedAt            string   `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,13,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Appointment) Reset()         { *m = Appointment{} }
func (m *Appointment) String() string { return proto.CompactTextString(m) }
func (*Appointment) ProtoMessage()    {}
func (*Appointment) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ede99e18a76dc86, []int{0}
}
func (m *Appointment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Appointment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Appointment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Appointment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Appointment.Merge(m, src)
}
func (m *Appointment) XXX_Size() int {
	return m.Size()
}
func (m *Appointment) XXX_DiscardUnknown() {
	xxx_messageInfo_Appointment.DiscardUnknown(m)
}

var xxx_messageInfo_Appointment proto.InternalMessageInfo

func (m *Appointment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Appointment) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *Appointment) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *Appointment) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Appointment) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *Appointment) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *Appointment) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Appointment) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Appointment) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

func (m *Appointment) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

func (m *Appointment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Appointment) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Appointment) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type Appointments struct {
	Count                int64          `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Appointments         []*Appointment `protobuf:"bytes,2,rep,name=appointments,proto3" json:"appointments"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Appointments) Reset()         { *m = Appointments{} }
func (m *Appointments) String() string { return proto.CompactTextString(m) }
func (*Appointments) ProtoMessage()    {}
func (*Appointments) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ede99e18a76dc86, []int{1}
}
func (m *Appointments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Appointments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Appointments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Appointments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Appointments.Merge(m, src)
}
func (m *Appointments) XXX_Size() int {
	return m.Size()
}
func (m *Appointments) XXX_DiscardUnknown() {
	xxx_messageInfo_Appointments.DiscardUnknown(m)
}

var xxx_messageInfo_Appointments proto.InternalMessageInfo

func (m *Appointments) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Appointments) GetAppointments() []*Appointment {
	if m != nil {
		return m.Appointments
	}
	return nil
}

type CreateAppointmentReq struct {
	DepartmentId         string   `protobuf:"bytes,2,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	AppointmentDate      string   `protobuf:"bytes,5,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date"`
	AppointmentTime      string   `protobuf:"bytes,6,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time"`
	Duration             int64    `protobuf:"varint,7,opt,name=duration,proto3" json:"duration"`
	Key                  string   `protobuf:"bytes,8,opt,name=key,proto3" json:"key"`
	ExpiresAt            string   `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at"`
	PatientStatus        bool     `protobuf:"varint,10,opt,name=patient_status,json=patientStatus,proto3" json:"patient_status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAppointmentReq) Reset()         { *m = CreateAppointmentReq{} }
func (m *CreateAppointmentReq) String() string { return proto.CompactTextString(m) }
func (*CreateAppointmentReq) ProtoMessage()    {}
func (*CreateAppointmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ede99e18a76dc86, []int{2}
}
func (m *CreateAppointmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAppointmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAppointmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAppointmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppointmentReq.Merge(m, src)
}
func (m *CreateAppointmentReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateAppointmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppointmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppointmentReq proto.InternalMessageInfo

func (m *CreateAppointmentReq) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *CreateAppointmentReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreateAppointmentReq) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *CreateAppointmentReq) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *CreateAppointmentReq) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *CreateAppointmentReq) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CreateAppointmentReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateAppointmentReq) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

func (m *CreateAppointmentReq) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

type UpdateAppointmentReq struct {
	AppointmentDate      string   `protobuf:"bytes,2,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date"`
	AppointmentTime      string   `protobuf:"bytes,3,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time"`
	Duration             int64    `protobuf:"varint,4,opt,name=duration,proto3" json:"duration"`
	Key                  string   `protobuf:"bytes,5,opt,name=key,proto3" json:"key"`
	ExpiresAt            string   `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at"`
	PatientStatus        bool     `protobuf:"varint,7,opt,name=patient_status,json=patientStatus,proto3" json:"patient_status"`
	Field                string   `protobuf:"bytes,8,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,9,opt,name=value,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAppointmentReq) Reset()         { *m = UpdateAppointmentReq{} }
func (m *UpdateAppointmentReq) String() string { return proto.CompactTextString(m) }
func (*UpdateAppointmentReq) ProtoMessage()    {}
func (*UpdateAppointmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ede99e18a76dc86, []int{3}
}
func (m *UpdateAppointmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAppointmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAppointmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAppointmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAppointmentReq.Merge(m, src)
}
func (m *UpdateAppointmentReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAppointmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAppointmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAppointmentReq proto.InternalMessageInfo

func (m *UpdateAppointmentReq) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *UpdateAppointmentReq) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *UpdateAppointmentReq) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *UpdateAppointmentReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateAppointmentReq) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

func (m *UpdateAppointmentReq) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

func (m *UpdateAppointmentReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateAppointmentReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type AppointmentFieldValueReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppointmentFieldValueReq) Reset()         { *m = AppointmentFieldValueReq{} }
func (m *AppointmentFieldValueReq) String() string { return proto.CompactTextString(m) }
func (*AppointmentFieldValueReq) ProtoMessage()    {}
func (*AppointmentFieldValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ede99e18a76dc86, []int{4}
}
func (m *AppointmentFieldValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppointmentFieldValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppointmentFieldValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppointmentFieldValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppointmentFieldValueReq.Merge(m, src)
}
func (m *AppointmentFieldValueReq) XXX_Size() int {
	return m.Size()
}
func (m *AppointmentFieldValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppointmentFieldValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppointmentFieldValueReq proto.InternalMessageInfo

func (m *AppointmentFieldValueReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *AppointmentFieldValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *AppointmentFieldValueReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type DeleteAppointmentStatus struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAppointmentStatus) Reset()         { *m = DeleteAppointmentStatus{} }
func (m *DeleteAppointmentStatus) String() string { return proto.CompactTextString(m) }
func (*DeleteAppointmentStatus) ProtoMessage()    {}
func (*DeleteAppointmentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ede99e18a76dc86, []int{5}
}
func (m *DeleteAppointmentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAppointmentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAppointmentStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAppointmentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppointmentStatus.Merge(m, src)
}
func (m *DeleteAppointmentStatus) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAppointmentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppointmentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppointmentStatus proto.InternalMessageInfo

func (m *DeleteAppointmentStatus) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetAllAppointmentsReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	Page                 uint64   `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Limit                uint64   `protobuf:"varint,5,opt,name=limit,proto3" json:"limit"`
	OrderBy              string   `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllAppointmentsReq) Reset()         { *m = GetAllAppointmentsReq{} }
func (m *GetAllAppointmentsReq) String() string { return proto.CompactTextString(m) }
func (*GetAllAppointmentsReq) ProtoMessage()    {}
func (*GetAllAppointmentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ede99e18a76dc86, []int{6}
}
func (m *GetAllAppointmentsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllAppointmentsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllAppointmentsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllAppointmentsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAppointmentsReq.Merge(m, src)
}
func (m *GetAllAppointmentsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllAppointmentsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAppointmentsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAppointmentsReq proto.InternalMessageInfo

func (m *GetAllAppointmentsReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllAppointmentsReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllAppointmentsReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetAllAppointmentsReq) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllAppointmentsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllAppointmentsReq) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func init() {
	proto.RegisterType((*Appointment)(nil), "booking_service.Appointment")
	proto.RegisterType((*Appointments)(nil), "booking_service.Appointments")
	proto.RegisterType((*CreateAppointmentReq)(nil), "booking_service.CreateAppointmentReq")
	proto.RegisterType((*UpdateAppointmentReq)(nil), "booking_service.UpdateAppointmentReq")
	proto.RegisterType((*AppointmentFieldValueReq)(nil), "booking_service.AppointmentFieldValueReq")
	proto.RegisterType((*DeleteAppointmentStatus)(nil), "booking_service.DeleteAppointmentStatus")
	proto.RegisterType((*GetAllAppointmentsReq)(nil), "booking_service.GetAllAppointmentsReq")
}

func init() {
	proto.RegisterFile("booking_service/booked_appointments.proto", fileDescriptor_8ede99e18a76dc86)
}

var fileDescriptor_8ede99e18a76dc86 = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x76, 0x92, 0x3a, 0xd3, 0xf4, 0x6f, 0x15, 0xc0, 0x2d, 0x34, 0x8a, 0x8c, 0x8a, 0xd2,
	0x97, 0x22, 0xca, 0x05, 0x70, 0xa9, 0x40, 0x7d, 0x75, 0x01, 0x01, 0x2f, 0xd6, 0xc6, 0xbb, 0x2d,
	0xab, 0x3a, 0xb1, 0xb1, 0x37, 0x11, 0xb9, 0x03, 0x07, 0xe0, 0x02, 0x3d, 0x08, 0x6f, 0x3c, 0x72,
	0x04, 0x14, 0x2e, 0xc0, 0x11, 0xd0, 0xfe, 0xb4, 0xdd, 0xc6, 0x6e, 0x52, 0x24, 0x1e, 0x79, 0xf3,
	0x7c, 0xf3, 0xcd, 0x64, 0xe6, 0x9b, 0x99, 0x0d, 0xec, 0xf6, 0xd3, 0xf4, 0x8c, 0x0d, 0x4f, 0xa3,
	0x82, 0xe6, 0x63, 0x16, 0xd3, 0x27, 0xc2, 0xa6, 0x24, 0xc2, 0x59, 0x96, 0xb2, 0x21, 0x1f, 0xd0,
	0x21, 0x2f, 0xf6, 0xb2, 0x3c, 0xe5, 0x29, 0x5a, 0x9b, 0xa1, 0xfa, 0xe7, 0x0e, 0x2c, 0x07, 0x57,
	0x3c, 0xb4, 0x0a, 0x36, 0x23, 0x9e, 0xd5, 0xb5, 0x7a, 0x4e, 0x68, 0x33, 0x82, 0x1e, 0xc1, 0x0a,
	0xa1, 0x19, 0xce, 0xa5, 0x37, 0x62, 0xc4, 0xb3, 0xbb, 0x56, 0xaf, 0x19, 0xb6, 0xae, 0xc0, 0x23,
	0x82, 0x1e, 0x40, 0x93, 0xa4, 0x31, 0x4f, 0x73, 0x41, 0x70, 0x24, 0xc1, 0x55, 0xc0, 0x11, 0x41,
	0xdb, 0x00, 0x19, 0xe6, 0x4c, 0x87, 0xd7, 0xa4, 0xb7, 0xa9, 0x91, 0x23, 0x82, 0x76, 0x61, 0xdd,
	0xa8, 0x33, 0x22, 0x98, 0x53, 0xaf, 0x2e, 0x49, 0x6b, 0x06, 0x7e, 0x88, 0x39, 0x9d, 0xa5, 0x72,
	0x36, 0xa0, 0x5e, 0xa3, 0x44, 0x7d, 0xcd, 0x06, 0x14, 0x6d, 0x81, 0x4b, 0x46, 0x39, 0xe6, 0x2c,
	0x1d, 0x7a, 0x4b, 0xb2, 0x99, 0x4b, 0x1b, 0xad, 0x83, 0x73, 0x46, 0x27, 0x9e, 0x2b, 0x23, 0xc5,
	0xa7, 0x28, 0x91, 0x7e, 0xce, 0x58, 0x4e, 0x8b, 0x08, 0x73, 0xaf, 0xa9, 0x4a, 0xd4, 0x48, 0xc0,
	0xd1, 0x0e, 0xac, 0x5e, 0x74, 0x50, 0x70, 0xcc, 0x47, 0x85, 0x07, 0x5d, 0xab, 0xe7, 0x86, 0x2b,
	0x1a, 0x3d, 0x96, 0xa0, 0xc8, 0x12, 0xe7, 0x14, 0x73, 0xa1, 0x3c, 0xf7, 0x96, 0x55, 0x16, 0x8d,
	0x04, 0x5c, 0xb8, 0x47, 0x19, 0xb9, 0x70, 0xb7, 0x94, 0x5b, 0x23, 0xca, 0x4d, 0x68, 0x42, 0xb5,
	0x7b, 0x45, 0xb9, 0x35, 0x12, 0x70, 0xff, 0x04, 0x5a, 0xc6, 0x98, 0x0a, 0xd4, 0x86, 0x7a, 0x9c,
	0x8e, 0x86, 0x5c, 0x8f, 0x4a, 0x19, 0xe8, 0x39, 0xb4, 0xcc, 0xa1, 0x7b, 0x76, 0xd7, 0xe9, 0x2d,
	0xef, 0x3f, 0xdc, 0x9b, 0x99, 0xfa, 0x9e, 0x91, 0x2a, 0xbc, 0x16, 0xe1, 0x7f, 0xb3, 0xa1, 0xfd,
	0x42, 0xd6, 0x6c, 0x72, 0xe8, 0xa7, 0xff, 0x8b, 0x70, 0xeb, 0x45, 0xf0, 0xbf, 0xd8, 0xd0, 0x7e,
	0x23, 0x07, 0x3b, 0xa3, 0x61, 0x55, 0x8b, 0xf6, 0xed, 0x5b, 0x74, 0x16, 0xb7, 0x58, 0xab, 0x6e,
	0xb1, 0x7e, 0x53, 0x8b, 0x8d, 0xc5, 0x2d, 0x2e, 0x55, 0xed, 0x7a, 0x1b, 0xea, 0x27, 0x8c, 0x26,
	0x44, 0x8b, 0xa7, 0x0c, 0x81, 0x8e, 0x71, 0x32, 0xa2, 0x5a, 0x39, 0x65, 0xf8, 0x31, 0x78, 0x86,
	0x0e, 0x2f, 0x05, 0xf3, 0xad, 0x70, 0x08, 0x45, 0x2e, 0xf3, 0x58, 0x95, 0x79, 0x6c, 0x23, 0x8f,
	0x58, 0x2e, 0x56, 0x44, 0x38, 0xe6, 0x6c, 0xac, 0xb4, 0x70, 0x43, 0x97, 0x15, 0x81, 0xb4, 0xfd,
	0xa7, 0x70, 0xff, 0x50, 0x1e, 0x8b, 0xf1, 0x53, 0xba, 0xd6, 0x7b, 0xd0, 0xd0, 0xad, 0x58, 0x32,
	0x48, 0x5b, 0xfe, 0xb9, 0x05, 0x77, 0x5f, 0x51, 0x1e, 0x24, 0x89, 0x79, 0x59, 0xff, 0xb2, 0x2a,
	0x84, 0xa0, 0x96, 0xe1, 0x53, 0x2a, 0xc7, 0x52, 0x0b, 0xe5, 0xb7, 0x48, 0x93, 0xb0, 0x01, 0xe3,
	0x72, 0x28, 0xb5, 0x50, 0x19, 0x68, 0x13, 0xdc, 0x34, 0x27, 0x34, 0x8f, 0xfa, 0x13, 0x3d, 0x94,
	0x25, 0x69, 0x1f, 0x4c, 0xf6, 0x7f, 0x3b, 0xb0, 0x79, 0x20, 0x5f, 0x74, 0xb3, 0xce, 0x63, 0x75,
	0xca, 0xe8, 0x1d, 0x6c, 0x94, 0xee, 0x15, 0xed, 0x94, 0x2e, 0xbe, 0xea, 0xa6, 0xb7, 0xe6, 0x3e,
	0x0c, 0xe8, 0x3d, 0xac, 0x0a, 0x79, 0x0c, 0x64, 0x77, 0x1e, 0xff, 0xda, 0x60, 0x17, 0xa4, 0xfe,
	0x00, 0x1b, 0x25, 0xe5, 0xd1, 0xe3, 0x52, 0x48, 0xe5, 0x74, 0xb6, 0xb6, 0xe7, 0xa5, 0x2e, 0x84,
	0x20, 0xa5, 0xe3, 0xab, 0x10, 0xa4, 0xea, 0x40, 0x17, 0x54, 0xfd, 0x11, 0x36, 0x4a, 0x3b, 0xf6,
	0x37, 0x9a, 0xf4, 0x4a, 0xd4, 0x1b, 0x56, 0xf6, 0x60, 0xfd, 0xfb, 0xb4, 0x63, 0xfd, 0x98, 0x76,
	0xac, 0x9f, 0xd3, 0x8e, 0xf5, 0xf5, 0x57, 0xe7, 0x4e, 0xbf, 0x21, 0xff, 0xbf, 0x9f, 0xfd, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x68, 0x64, 0x39, 0x71, 0xec, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BookedAppointmentsServiceClient is the client API for BookedAppointmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookedAppointmentsServiceClient interface {
	// bookedAppointments
	CreateAppointment(ctx context.Context, in *CreateAppointmentReq, opts ...grpc.CallOption) (*Appointment, error)
	GetAppointment(ctx context.Context, in *AppointmentFieldValueReq, opts ...grpc.CallOption) (*Appointment, error)
	GetAllAppointment(ctx context.Context, in *GetAllAppointmentsReq, opts ...grpc.CallOption) (*Appointments, error)
	UpdateAppointment(ctx context.Context, in *UpdateAppointmentReq, opts ...grpc.CallOption) (*Appointment, error)
	DeleteAppointment(ctx context.Context, in *AppointmentFieldValueReq, opts ...grpc.CallOption) (*DeleteAppointmentStatus, error)
}

type bookedAppointmentsServiceClient struct {
	cc *grpc.ClientConn
}

func NewBookedAppointmentsServiceClient(cc *grpc.ClientConn) BookedAppointmentsServiceClient {
	return &bookedAppointmentsServiceClient{cc}
}

func (c *bookedAppointmentsServiceClient) CreateAppointment(ctx context.Context, in *CreateAppointmentReq, opts ...grpc.CallOption) (*Appointment, error) {
	out := new(Appointment)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentsService/CreateAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentsServiceClient) GetAppointment(ctx context.Context, in *AppointmentFieldValueReq, opts ...grpc.CallOption) (*Appointment, error) {
	out := new(Appointment)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentsService/GetAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentsServiceClient) GetAllAppointment(ctx context.Context, in *GetAllAppointmentsReq, opts ...grpc.CallOption) (*Appointments, error) {
	out := new(Appointments)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentsService/GetAllAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentsServiceClient) UpdateAppointment(ctx context.Context, in *UpdateAppointmentReq, opts ...grpc.CallOption) (*Appointment, error) {
	out := new(Appointment)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentsService/UpdateAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentsServiceClient) DeleteAppointment(ctx context.Context, in *AppointmentFieldValueReq, opts ...grpc.CallOption) (*DeleteAppointmentStatus, error) {
	out := new(DeleteAppointmentStatus)
	err := c.cc.Invoke(ctx, "/booking_service.BookedAppointmentsService/DeleteAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookedAppointmentsServiceServer is the server API for BookedAppointmentsService service.
type BookedAppointmentsServiceServer interface {
	// bookedAppointments
	CreateAppointment(context.Context, *CreateAppointmentReq) (*Appointment, error)
	GetAppointment(context.Context, *AppointmentFieldValueReq) (*Appointment, error)
	GetAllAppointment(context.Context, *GetAllAppointmentsReq) (*Appointments, error)
	UpdateAppointment(context.Context, *UpdateAppointmentReq) (*Appointment, error)
	DeleteAppointment(context.Context, *AppointmentFieldValueReq) (*DeleteAppointmentStatus, error)
}

// UnimplementedBookedAppointmentsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBookedAppointmentsServiceServer struct {
}

func (*UnimplementedBookedAppointmentsServiceServer) CreateAppointment(ctx context.Context, req *CreateAppointmentReq) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (*UnimplementedBookedAppointmentsServiceServer) GetAppointment(ctx context.Context, req *AppointmentFieldValueReq) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (*UnimplementedBookedAppointmentsServiceServer) GetAllAppointment(ctx context.Context, req *GetAllAppointmentsReq) (*Appointments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppointment not implemented")
}
func (*UnimplementedBookedAppointmentsServiceServer) UpdateAppointment(ctx context.Context, req *UpdateAppointmentReq) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointment not implemented")
}
func (*UnimplementedBookedAppointmentsServiceServer) DeleteAppointment(ctx context.Context, req *AppointmentFieldValueReq) (*DeleteAppointmentStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppointment not implemented")
}

func RegisterBookedAppointmentsServiceServer(s *grpc.Server, srv BookedAppointmentsServiceServer) {
	s.RegisterService(&_BookedAppointmentsService_serviceDesc, srv)
}

func _BookedAppointmentsService_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServiceServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentsService/CreateAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServiceServer).CreateAppointment(ctx, req.(*CreateAppointmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentsService_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentFieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServiceServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentsService/GetAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServiceServer).GetAppointment(ctx, req.(*AppointmentFieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentsService_GetAllAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppointmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServiceServer).GetAllAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentsService/GetAllAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServiceServer).GetAllAppointment(ctx, req.(*GetAllAppointmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentsService_UpdateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServiceServer).UpdateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentsService/UpdateAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServiceServer).UpdateAppointment(ctx, req.(*UpdateAppointmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentsService_DeleteAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentFieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServiceServer).DeleteAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.BookedAppointmentsService/DeleteAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServiceServer).DeleteAppointment(ctx, req.(*AppointmentFieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookedAppointmentsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.BookedAppointmentsService",
	HandlerType: (*BookedAppointmentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppointment",
			Handler:    _BookedAppointmentsService_CreateAppointment_Handler,
		},
		{
			MethodName: "GetAppointment",
			Handler:    _BookedAppointmentsService_GetAppointment_Handler,
		},
		{
			MethodName: "GetAllAppointment",
			Handler:    _BookedAppointmentsService_GetAllAppointment_Handler,
		},
		{
			MethodName: "UpdateAppointment",
			Handler:    _BookedAppointmentsService_UpdateAppointment_Handler,
		},
		{
			MethodName: "DeleteAppointment",
			Handler:    _BookedAppointmentsService_DeleteAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/booked_appointments.proto",
}

func (m *Appointment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Appointment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Appointment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.ExpiresAt) > 0 {
		i -= len(m.ExpiresAt)
		copy(dAtA[i:], m.ExpiresAt)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.ExpiresAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x42
	}
	if m.Duration != 0 {
		i = encodeVarintBookedAppointments(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBookedAppointments(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Appointments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Appointments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Appointments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Appointments) > 0 {
		for iNdEx := len(m.Appointments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Appointments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookedAppointments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintBookedAppointments(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAppointmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAppointmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAppointmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.ExpiresAt) > 0 {
		i -= len(m.ExpiresAt)
		copy(dAtA[i:], m.ExpiresAt)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.ExpiresAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x42
	}
	if m.Duration != 0 {
		i = encodeVarintBookedAppointments(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAppointmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAppointmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAppointmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x42
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ExpiresAt) > 0 {
		i -= len(m.ExpiresAt)
		copy(dAtA[i:], m.ExpiresAt)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.ExpiresAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Duration != 0 {
		i = encodeVarintBookedAppointments(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AppointmentFieldValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppointmentFieldValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppointmentFieldValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAppointmentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppointmentStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAppointmentStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllAppointmentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllAppointmentsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllAppointmentsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintBookedAppointments(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintBookedAppointments(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookedAppointments(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBookedAppointments(dAtA []byte, offset int, v uint64) int {
	offset -= sovBookedAppointments(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Appointment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBookedAppointments(uint64(m.Id))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovBookedAppointments(uint64(m.Duration))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.ExpiresAt)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.PatientStatus {
		n += 2
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Appointments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovBookedAppointments(uint64(m.Count))
	}
	if len(m.Appointments) > 0 {
		for _, e := range m.Appointments {
			l = e.Size()
			n += 1 + l + sovBookedAppointments(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAppointmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovBookedAppointments(uint64(m.Duration))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.ExpiresAt)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.PatientStatus {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAppointmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovBookedAppointments(uint64(m.Duration))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.ExpiresAt)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.PatientStatus {
		n += 2
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppointmentFieldValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAppointmentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllAppointmentsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.Page != 0 {
		n += 1 + sovBookedAppointments(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovBookedAppointments(uint64(m.Limit))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovBookedAppointments(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBookedAppointments(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBookedAppointments(x uint64) (n int) {
	return sovBookedAppointments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Appointment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedAppointments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Appointment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Appointment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiresAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookedAppointments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Appointments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedAppointments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Appointments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Appointments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appointments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appointments = append(m.Appointments, &Appointment{})
			if err := m.Appointments[len(m.Appointments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookedAppointments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAppointmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedAppointments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAppointmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAppointmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiresAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookedAppointments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAppointmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedAppointments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAppointmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAppointmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiresAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookedAppointments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppointmentFieldValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedAppointments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointmentFieldValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointmentFieldValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookedAppointments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppointmentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedAppointments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppointmentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppointmentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookedAppointments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllAppointmentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedAppointments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllAppointmentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllAppointmentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookedAppointments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedAppointments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBookedAppointments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBookedAppointments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookedAppointments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBookedAppointments
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBookedAppointments
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBookedAppointments
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBookedAppointments        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBookedAppointments          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBookedAppointments = fmt.Errorf("proto: unexpected end of group")
)
